(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{467:function(e,t,s){"use strict";s.r(t);var o=s(49),a=Object(o.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"node"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node"}},[e._v("#")]),e._v(" node")]),e._v(" "),s("h2",{attrs:{id:"node-js-回调函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-js-回调函数"}},[e._v("#")]),e._v(" Node.js 回调函数")]),e._v(" "),s("p",[e._v("Node.js 异步编程的直接体现就是回调。")]),e._v(" "),s("p",[e._v("异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。")]),e._v(" "),s("p",[e._v("回调函数在完成任务后就会被调用，Node 使用了大量的回调函数，Node 所有 API 都支持回调函数。")]),e._v(" "),s("h2",{attrs:{id:"node-js-事件循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#node-js-事件循环"}},[e._v("#")]),e._v(" Node.js 事件循环")]),e._v(" "),s("p",[e._v("Node.js 是单进程单线程应用程序，但是因为 V8 引擎提供的异步执行回调接口，通过这些接口可以处理大量的并发，所以性能非常高。")]),e._v(" "),s("p",[e._v("Node.js 几乎每一个 API 都是支持回调函数的。")]),e._v(" "),s("p",[e._v("Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。")]),e._v(" "),s("p",[e._v("Node.js 单线程类似进入一个 while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.")])])}),[],!1,null,null,null);t.default=a.exports}}]);